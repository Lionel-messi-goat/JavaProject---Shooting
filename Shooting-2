import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ShootingGame extends JPanel implements MouseMotionListener, MouseListener, ActionListener {
    private Timer timer;
    private java.util.ArrayList<Target> targets = new java.util.ArrayList<>();  // 생성된 목표물 리스트
    private int score = 0;  // 점수
    private int aimX = 400, aimY = 300;  // 에임의 초기 위치
    private java.util.Random rand = new java.util.Random();

    public ShootingGame() {
        this.setPreferredSize(new Dimension(800, 600));
        this.addMouseListener(this);
        this.addMouseMotionListener(this);  // 마우스 움직임 리스너 추가
        timer = new Timer(30, this);  // 30ms마다 애니메이션 갱신
        timer.start();
        spawnTarget();  // 처음 목표물 하나 스폰

        // 마우스 커서를 숨기기
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image invisibleCursorImage = toolkit.createImage(new byte[0]);
        Cursor invisibleCursor = toolkit.createCustomCursor(invisibleCursorImage, new Point(0, 0), "invisibleCursor");
        this.setCursor(invisibleCursor);
    }

    // 목표물(더미) 클래스
    class Target {
        int x, y;
        int size = 50;
        int lifetime = 100;  // 목표물이 나타나 있는 시간 (ticks)

        Target(int x, int y) {
            this.x = x;
            this.y = y;
        }

        void decreaseLifetime() {
            lifetime--;
        }
    }

    // 목표물을 스폰하는 메서드
    private void spawnTarget() {
        int x = rand.nextInt(800 - 50);  // 화면 내 랜덤 위치
        int y = rand.nextInt(600 - 50);
        targets.add(new Target(x, y));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // 점수 표시
        g.setColor(Color.BLACK);
        g.drawString("Score: " + score, 10, 20);

        // 에임 그리기 (마우스 위치 따라 이동)
        g.setColor(Color.BLUE);
        g.drawOval(aimX - 15, aimY - 15, 30, 30);
        g.drawLine(aimX - 20, aimY, aimX + 20, aimY);
        g.drawLine(aimX, aimY - 20, aimX, aimY + 20);

        // 목표물 그리기
        g.setColor(Color.RED);
        for (Target target : targets) {
            g.fillOval(target.x, target.y, target.size, target.size);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // 목표물의 수명 감소 및 제거
        java.util.Iterator<Target> targetIterator = targets.iterator();
        while (targetIterator.hasNext()) {
            Target target = targetIterator.next();
            target.decreaseLifetime();
            if (target.lifetime <= 0) {  // 수명이 다하면 제거
                targetIterator.remove();
            }
        }

        // 일정 확률로 새로운 목표물 스폰
        if (Math.random() < 0.02) {  // 2% 확률로 스폰
            spawnTarget();
        }

        repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        int mouseX = e.getX();
        int mouseY = e.getY();

        // 클릭한 위치가 목표물에 닿았는지 확인
        java.util.Iterator<Target> targetIterator = targets.iterator();
        while (targetIterator.hasNext()) {
            Target target = targetIterator.next();
            if (mouseX >= target.x && mouseX <= target.x + target.size &&
                mouseY >= target.y && mouseY <= target.y + target.size) {
                // 목표물을 맞추면 점수 증가
                score += 10;
                targetIterator.remove();
                break;
            }
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // 마우스 위치를 에임 위치로 설정
        aimX = e.getX();
        aimY = e.getY();
        repaint();  // 에임 위치 갱신
    }

    // 나머지 인터페이스 메서드들
    @Override public void mouseReleased(MouseEvent e) {}
    @Override public void mouseClicked(MouseEvent e) {}
    @Override public void mouseEntered(MouseEvent e) {}
    @Override public void mouseExited(MouseEvent e) {}
    @Override public void mouseDragged(MouseEvent e) {}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(StartScreen::new); // 초기화면 클래스를 호출
    }
}

// 초기화면 클래스
class StartScreen extends JFrame {
    public StartScreen() {
        super("환영합니다");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);

        // 배경 패널 생성
        BackgroundPanel panel = new BackgroundPanel("background.jpg"); // 배경 이미지 경로
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); // 세로 방향 정렬
        panel.setOpaque(false);

        // 타이틀 라벨
        JLabel titleLabel = new JLabel("슈팅 게임");
        titleLabel.setFont(new Font("맑은 고딕", Font.BOLD, 36));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        titleLabel.setForeground(Color.WHITE);

        // 시작 버튼
        JButton startButton = createButton("게임 시작");
        startButton.addActionListener(e -> {
            JFrame gameFrame = new JFrame("슈팅 게임");
            gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            gameFrame.add(new ShootingGame());
            gameFrame.pack();
            gameFrame.setVisible(true);
            dispose();
        });

        // 도움말 버튼
        JButton helpButton = createButton("게임 설명");
        helpButton.addActionListener(e -> showInstructions());

        // 컴포넌트 간 간격
        panel.add(Box.createVerticalGlue());
        panel.add(titleLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 30)));
        panel.add(startButton);
        panel.add(Box.createRigidArea(new Dimension(0, 15)));
        panel.add(helpButton);
        panel.add(Box.createVerticalGlue());

        add(panel);
        setVisible(true);
    }

    // 게임 설명 표시
    private void showInstructions() {
        String instructions = """
                환영합니다! 슈팅 게임에 오신 것을 환영합니다.
                1. 마우스를 움직여 조준하세요.
                2. 클릭하여 목표물을 맞추세요.
                3. 목표물을 맞추면 점수를 획득합니다.
                즐겁게 플레이하세요!
                """;
        JOptionPane.showMessageDialog(this, instructions, "게임 설명", JOptionPane.INFORMATION_MESSAGE);
    }

    // 버튼 생성 메서드
    private JButton createButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("맑은 고딕", Font.BOLD, 20)); // 한글 폰트 설정
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.setFocusPainted(false);
        return button;
    }
}

// 배경 이미지를 지원하는 패널 클래스
class BackgroundPanel extends JPanel {
    private Image backgroundImage;

    public BackgroundPanel(String imagePath) {
        try {
            backgroundImage = new ImageIcon(imagePath).getImage();
        } catch (Exception e) {
            System.err.println("Failed to load background image: " + e.getMessage());
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (backgroundImage != null) {
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
    }
}
